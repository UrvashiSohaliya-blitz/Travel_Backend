{"version":3,"sources":["../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToClass } from 'class-transformer';\nimport { validate, ValidationError } from 'class-validator';\nimport { RequestHandler } from 'express';\nimport { HttpException } from '@exceptions/HttpException';\n\nconst validationMiddleware = (\n  type: any,\n  value: string | 'body' | 'query' | 'params' = 'body',\n  skipMissingProperties = false,\n  // whitelist = true,\n  // forbidNonWhitelisted = true,\n): RequestHandler => {\n  return (req, res, next) => {\n    validate(plainToClass(type, req[value]), { skipMissingProperties }).then((errors: ValidationError[]) => {\n      if (errors.length > 0) {\n        \n        const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\n        next(new HttpException(400, message));\n      } else {\n        next();\n      }\n    });\n  };\n};\n\nexport default validationMiddleware;\n"],"names":["validationMiddleware","type","value","skipMissingProperties","req","res","next","validate","plainToClass","then","errors","length","message","map","error","Object","values","constraints","join","HttpException"],"mappings":";;;;+BAyBA;;aAAA;;kCAzB6B;gCACa;+BAEZ;AAE9B,MAAMA,uBAAuB,CAC3BC,MACAC,QAA8C,MAAM,EACpDC,wBAAwB,KAAK,GAGV;IACnB,OAAO,CAACC,KAAKC,KAAKC,OAAS;QACzBC,IAAAA,wBAAQ,EAACC,IAAAA,8BAAY,EAACP,MAAMG,GAAG,CAACF,MAAM,GAAG;YAAEC;QAAsB,GAAGM,IAAI,CAAC,CAACC,SAA8B;YACtG,IAAIA,OAAOC,MAAM,GAAG,GAAG;gBAErB,MAAMC,UAAUF,OAAOG,GAAG,CAAC,CAACC,QAA2BC,OAAOC,MAAM,CAACF,MAAMG,WAAW,GAAGC,IAAI,CAAC;gBAC9FZ,KAAK,IAAIa,4BAAa,CAAC,KAAKP;YAC9B,OAAO;gBACLN;YACF,CAAC;QACH;IACF;AACF;MAEA,WAAeN"}