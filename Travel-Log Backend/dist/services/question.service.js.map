{"version":3,"sources":["../../src/services/question.service.ts"],"sourcesContent":["import {CreateQuestionDto} from '@dtos/questions.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { Question } from '@interfaces/question.interface';\nimport questionModel from '@models/question.model';\nimport { isEmpty } from '@utils/util';\n\nclass QuestionService {\n  public questions = questionModel;\n\n \n  public async createQuestion(questionData: CreateQuestionDto): Promise<Question> {\n    if (isEmpty(questionData)) throw new HttpException(400, \"blogData is empty\");\n    const data: Question =  await this.questions.create({ ...questionData});\n    console.log(data)\n    return data;\n   \n    \n  }\n    public async findQuestionByBlogId(blogId: String): Promise<Question[]>{\n        if (isEmpty(blogId)) throw new HttpException(400, \"blogId is required\");\n\n        const data:Question[] = await this.questions.find({ blogId: blogId });\n        return data;\n\n    }\n    public async findQuestionByUserId(userId: String): Promise<Question[]>{\n        if (isEmpty(userId)) throw new HttpException(400, \"userId is required\");\n       \n        const data:Question[] = await this.questions.find({ userId: userId });\n      \n        return data;\n\n    }\n   public async findQuestionByblogUser(userId: String): Promise<Question[]>{\n        if (isEmpty(userId)) throw new HttpException(400, \"userId is required\");\n       \n        const data:Question[] = await this.questions.find({ blogUser: userId });\n      \n        return data;\n\n    }\n    public async findQuestionById(id: String): Promise<Question>{\n        if (isEmpty(id)) throw new HttpException(400, \"id is required\");\n\n        const data:Question = await this.questions.findOne({ _id: id });\n        return data;\n\n    }\n public async updateQuestion(blogId:string,data:any ): Promise<Question> {\n   \n   const updateQuestionById = await this.questions.findByIdAndUpdate({ _id: blogId }, data);\n    if (!updateQuestionById) throw new HttpException(409, \"Question doesn't exist\");\n   return updateQuestionById;\n\n    \n   \n      \n  }\n  \n  public async deleteQuestion(questionId: string): Promise<Question> {\n    const deleteQuestionById: Question = await this.questions.findByIdAndDelete(questionId);\n    if (!deleteQuestionById) throw new HttpException(409, \"Question doesn't exist\");\n\n    return deleteQuestionById;\n  }\n}\n\nexport default QuestionService;\n"],"names":["QuestionService","createQuestion","questionData","isEmpty","HttpException","data","questions","create","console","log","findQuestionByBlogId","blogId","find","findQuestionByUserId","userId","findQuestionByblogUser","blogUser","findQuestionById","id","findOne","_id","updateQuestion","updateQuestionById","findByIdAndUpdate","deleteQuestion","questionId","deleteQuestionById","findByIdAndDelete","questionModel"],"mappings":";;;;+BAmEA;;aAAA;;+BAlE8B;sDAEJ;sBACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,kBAAN,MAAMA;IAIJ,MAAaC,eAAeC,YAA+B,EAAqB;QAC9E,IAAIC,IAAAA,aAAO,EAACD,eAAe,MAAM,IAAIE,4BAAa,CAAC,KAAK,qBAAqB;QAC7E,MAAMC,OAAkB,MAAM,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,kBAAKL;QACzDM,QAAQC,GAAG,CAACJ;QACZ,OAAOA;IAGT;IACE,MAAaK,qBAAqBC,MAAc,EAAsB;QAClE,IAAIR,IAAAA,aAAO,EAACQ,SAAS,MAAM,IAAIP,4BAAa,CAAC,KAAK,sBAAsB;QAExE,MAAMC,OAAkB,MAAM,IAAI,CAACC,SAAS,CAACM,IAAI,CAAC;YAAED,QAAQA;QAAO;QACnE,OAAON;IAEX;IACA,MAAaQ,qBAAqBC,MAAc,EAAsB;QAClE,IAAIX,IAAAA,aAAO,EAACW,SAAS,MAAM,IAAIV,4BAAa,CAAC,KAAK,sBAAsB;QAExE,MAAMC,OAAkB,MAAM,IAAI,CAACC,SAAS,CAACM,IAAI,CAAC;YAAEE,QAAQA;QAAO;QAEnE,OAAOT;IAEX;IACD,MAAaU,uBAAuBD,MAAc,EAAsB;QACnE,IAAIX,IAAAA,aAAO,EAACW,SAAS,MAAM,IAAIV,4BAAa,CAAC,KAAK,sBAAsB;QAExE,MAAMC,OAAkB,MAAM,IAAI,CAACC,SAAS,CAACM,IAAI,CAAC;YAAEI,UAAUF;QAAO;QAErE,OAAOT;IAEX;IACA,MAAaY,iBAAiBC,EAAU,EAAoB;QACxD,IAAIf,IAAAA,aAAO,EAACe,KAAK,MAAM,IAAId,4BAAa,CAAC,KAAK,kBAAkB;QAEhE,MAAMC,OAAgB,MAAM,IAAI,CAACC,SAAS,CAACa,OAAO,CAAC;YAAEC,KAAKF;QAAG;QAC7D,OAAOb;IAEX;IACH,MAAagB,eAAeV,MAAa,EAACN,IAAQ,EAAsB;QAEtE,MAAMiB,qBAAqB,MAAM,IAAI,CAAChB,SAAS,CAACiB,iBAAiB,CAAC;YAAEH,KAAKT;QAAO,GAAGN;QAClF,IAAI,CAACiB,oBAAoB,MAAM,IAAIlB,4BAAa,CAAC,KAAK,0BAA0B;QACjF,OAAOkB;IAKR;IAEA,MAAaE,eAAeC,UAAkB,EAAqB;QACjE,MAAMC,qBAA+B,MAAM,IAAI,CAACpB,SAAS,CAACqB,iBAAiB,CAACF;QAC5E,IAAI,CAACC,oBAAoB,MAAM,IAAItB,4BAAa,CAAC,KAAK,0BAA0B;QAEhF,OAAOsB;IACT;;aAzDOpB,YAAYsB,sBAAa;;AA0DlC;MAEA,WAAe5B"}