{"version":3,"sources":["../../src/services/blogs.service.ts"],"sourcesContent":["import { CreateBlogDto } from '@dtos/blogs.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { Blog } from '@interfaces/blogs.interface';\nimport blogModel from '@models/blog.modal';\nimport { isEmpty } from '@utils/util';\n\nclass BlogService {\n  public blogs = blogModel;\n\n  public async findAllBlog(page: number = 0, limit: number = 10, createdAt: number = -1, user: string = \"\"): Promise<Blog[]> {\n  \n    if (user!== \"undefined\" && user) {\n      \n       const data: Blog[] = await this.blogs.find({userId:user}).sort({createdAt:createdAt}).skip(page * limit)\n      .limit(limit);\n    \n    return data;\n    } else {\n       const data: Blog[] = await this.blogs.find().sort({createdAt:createdAt}).skip(page * limit)\n      .limit(limit);\n    \n    return data;\n    }\n   \n  }\n  public async findAllBlogLength(limit: number, user: string) {\n    if (user !== 'undefined' && user) {\n        const length: Blog[] = await this.blogs.find({userId:user});\n    return Math.ceil(length.length/limit);\n    } else {\n      const length: Blog[] = await this.blogs.find();\n    return Math.ceil(length.length/limit);\n    }\n    \n  }\n\n  public async findBlogById(blogId: string): Promise<Blog> {\n    if (isEmpty(blogId)) throw new HttpException(400, \"UserId is empty\");\n\n    const findUser: Blog = await this.blogs.findOne({ _id: blogId });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createBlog(blogData: CreateBlogDto): Promise<Blog> {\n    if (isEmpty(blogData)) throw new HttpException(400, \"blogData is empty\");\n\n//**************************error with data type */\n    \n    const data: any =  await this.blogs.create({ ...blogData});\n    \n    return data;\n   \n    \n  }\n public async updateBlog(blogId:string,data:any ): Promise<Blog> {\n   \n   const updateBlogById = await this.blogs.findByIdAndUpdate({ _id: blogId }, data);\n    if (!updateBlogById) throw new HttpException(409, \"Blog doesn't exist\");\n   return updateBlogById;\n\n    \n   \n      \n  }\n  \n  public async deleteBlog(blogId: string): Promise<Blog> {\n    const deleteBlogById: Blog = await this.blogs.findByIdAndDelete(blogId);\n    if (!deleteBlogById) throw new HttpException(409, \"Blog doesn't exist\");\n\n    return deleteBlogById;\n  }\n}\n\nexport default BlogService;\n"],"names":["BlogService","findAllBlog","page","limit","createdAt","user","data","blogs","find","userId","sort","skip","findAllBlogLength","length","Math","ceil","findBlogById","blogId","isEmpty","HttpException","findUser","findOne","_id","createBlog","blogData","create","updateBlog","updateBlogById","findByIdAndUpdate","deleteBlog","deleteBlogById","findByIdAndDelete","blogModel"],"mappings":";;;;+BA2EA;;aAAA;;+BA1E8B;kDAER;sBACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,cAAN,MAAMA;IAGJ,MAAaC,YAAYC,OAAe,CAAC,EAAEC,QAAgB,EAAE,EAAEC,YAAoB,CAAC,CAAC,EAAEC,OAAe,EAAE,EAAmB;QAEzH,IAAIA,SAAQ,eAAeA,MAAM;YAE9B,MAAMC,OAAe,MAAM,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;gBAACC,QAAOJ;YAAI,GAAGK,IAAI,CAAC;gBAACN,WAAUA;YAAS,GAAGO,IAAI,CAACT,OAAOC,OAClGA,KAAK,CAACA;YAET,OAAOG;QACP,OAAO;YACJ,MAAMA,OAAe,MAAM,IAAI,CAACC,KAAK,CAACC,IAAI,GAAGE,IAAI,CAAC;gBAACN,WAAUA;YAAS,GAAGO,IAAI,CAACT,OAAOC,OACrFA,KAAK,CAACA;YAET,OAAOG;QACP,CAAC;IAEH;IACA,MAAaM,kBAAkBT,KAAa,EAAEE,IAAY,EAAE;QAC1D,IAAIA,SAAS,eAAeA,MAAM;YAC9B,MAAMQ,SAAiB,MAAM,IAAI,CAACN,KAAK,CAACC,IAAI,CAAC;gBAACC,QAAOJ;YAAI;YAC7D,OAAOS,KAAKC,IAAI,CAACF,OAAOA,MAAM,GAACV;QAC/B,OAAO;YACL,MAAMU,SAAiB,MAAM,IAAI,CAACN,KAAK,CAACC,IAAI;YAC9C,OAAOM,KAAKC,IAAI,CAACF,OAAOA,MAAM,GAACV;QAC/B,CAAC;IAEH;IAEA,MAAaa,aAAaC,MAAc,EAAiB;QACvD,IAAIC,IAAAA,aAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,mBAAmB;QAErE,MAAMC,WAAiB,MAAM,IAAI,CAACb,KAAK,CAACc,OAAO,CAAC;YAAEC,KAAKL;QAAO;QAC9D,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOC;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAiB;QAC9D,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK,qBAAqB;QAIzE,MAAMb,OAAa,MAAM,IAAI,CAACC,KAAK,CAACkB,MAAM,CAAC,kBAAKD;QAEhD,OAAOlB;IAGT;IACD,MAAaoB,WAAWT,MAAa,EAACX,IAAQ,EAAkB;QAE9D,MAAMqB,iBAAiB,MAAM,IAAI,CAACpB,KAAK,CAACqB,iBAAiB,CAAC;YAAEN,KAAKL;QAAO,GAAGX;QAC1E,IAAI,CAACqB,gBAAgB,MAAM,IAAIR,4BAAa,CAAC,KAAK,sBAAsB;QACzE,OAAOQ;IAKR;IAEA,MAAaE,WAAWZ,MAAc,EAAiB;QACrD,MAAMa,iBAAuB,MAAM,IAAI,CAACvB,KAAK,CAACwB,iBAAiB,CAACd;QAChE,IAAI,CAACa,gBAAgB,MAAM,IAAIX,4BAAa,CAAC,KAAK,sBAAsB;QAExE,OAAOW;IACT;;aAjEOvB,QAAQyB,kBAAS;;AAkE1B;MAEA,WAAehC"}