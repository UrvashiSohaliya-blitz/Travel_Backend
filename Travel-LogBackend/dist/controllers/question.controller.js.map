{"version":3,"sources":["../../src/controllers/question.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Question } from '@interfaces/question.interface';\nimport QuestionService from '../services/question.service';\nimport { CreateQuestionDto } from '@dtos/questions.dto';\n\nclass questionController {\n  public questionService = new QuestionService();\n\n  public createQuestion = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n        const questionData: CreateQuestionDto = req.body;\n     \n      const createdQuestion: Question = await this.questionService.createQuestion(questionData);\n\n      res.status(201).json({ data: createdQuestion, message: 'question created' });\n    } catch (error) {\n        \n      next(error);\n    }\n  };\n    \n    public findQuestionsByUser = async (req: Request, res: Response, next: NextFunction) => {\n        \n        try {\n            let { id } = req.params;\n\n           \n             let findQuestion = await this.questionService.findQuestionByUserId(id);\n             res.status(200).json({ data: findQuestion, message: 'all questions' });\n             \n        } catch (error) {\n            next(error);\n        }\n    }\n\n        public findQuestionsByblogUser = async (req: Request, res: Response, next: NextFunction) => {\n        \n        try {\n            let { id } = req.params;\n\n           \n             let findQuestion = await this.questionService.findQuestionByblogUser(id);\n             res.status(200).json({ data: findQuestion, message: 'all questions' });\n             \n        } catch (error) {\n            next(error);\n        }\n    }\n\n   public findQuestionsByBlog = async (req: Request, res: Response, next: NextFunction) => {\n        \n        try {\n            let { id } = req.params;\n\n           \n             let findQuestion = await this.questionService.findQuestionByBlogId(id);\n             res.status(200).json({ data: findQuestion, message: 'all questions' });\n             \n        } catch (error) {\n            next(error);\n        }\n    }\n\n    public getQuestionbyId = async (req: Request, res: Response, next: NextFunction) => {\n        try {\n         const questionId: string = req.params.id;\n      const findQuestions: Question = await this.questionService.findQuestionById(questionId);\n\n      res.status(200).json({ data: findQuestions, message: 'findQuestion' });\n    } catch (error) {\n      next(error);\n    }\n    };\n    \n    public updateQuestionById = async (req: Request, res: Response, next: NextFunction) => {\n        try {\n            const questionId: string = req.params.id;\n            const data = req.body;\n            const updateQuestionData: Question = await this.questionService.updateQuestion(questionId, data);\n              res.status(200).json({ data: updateQuestionData, message: 'updateQuestion' });\n    } catch (error) {\n      next(error);\n    }\n       \n    }\n\n    public deleteQuestion = async (req: Request, res: Response, next: NextFunction) => {\n        try {\n            let questionId: string = req.params.id;\n              const deleteQuestionData: Question = await this.questionService.deleteQuestion(questionId);\n\n      res.status(200).json({ data: deleteQuestionData, message: 'deleted' }); \n\n        } catch (error) {\n            next(error);\n        }\n\n    }\n  \n\n  \n}\n\nexport default questionController;\n"],"names":["questionController","questionService","QuestionService","createQuestion","req","res","next","questionData","body","createdQuestion","status","json","data","message","error","findQuestionsByUser","id","params","findQuestion","findQuestionByUserId","findQuestionsByblogUser","findQuestionByblogUser","findQuestionsByBlog","findQuestionByBlogId","getQuestionbyId","questionId","findQuestions","findQuestionById","updateQuestionById","updateQuestionData","updateQuestion","deleteQuestion","deleteQuestionData"],"mappings":"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"}